/*===================================================================

The Medical Imaging Interaction Toolkit (MITK)

Copyright (c) German Cancer Research Center,
Division of Medical and Biological Informatics.
All rights reserved.

This software is distributed WITHOUT ANY WARRANTY; without
even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.

See LICENSE.txt or http://www.mitk.org for details.

===================================================================*/


#ifndef QmitkRegionGrowingView_h
#define QmitkRegionGrowingView_h

#include <berryISelectionListener.h>
#include <QmitkAbstractView.h>
#include "ui_QmitkRegionGrowingViewControls.h"

//! [includes]
#include "mitkPointSet.h"
#include "mitkIRenderWindowPartListener.h"
#include "TypeDefs.h"
#include "mitkImage.h"

#include <vector>

class QmitkPointListWidget;

// 
//-------------------------------------------------------------------------
class QmitkRegionGrowingView : public QmitkAbstractView, public mitk::IRenderWindowPartListener
{
<<<<<<< .merge_file_a04948
	Q_OBJECT

public:
	typedef std::vector<ImageType::IndexType>	VIndexes;
	typedef std::vector<double>					VIndexValue;

public:
	static const std::string VIEW_ID;
	QmitkRegionGrowingView();

protected slots:
	/// \brief Called when the user clicks the GUI button
	void DoRegionGrowing();
	void DoHessian();
	void DoThreshold();
	void DoNormalization();
	void DoMethodTest();
	void DoMethodTest2();
	void DoSelectRegion();
	void DoFillHole();
	void DoExtractRealData();
	void DoErosion();
	void DoColorLabel();
	void DoOutputForecast();
	void DoCrop();
	void DoShowAnnResults();
	void DoLoadIndexes();
	void DoLoadIndexValues();

protected:
	virtual void CreateQtPartControl(QWidget *parent) override;
	virtual void SetFocus() override;

	/// \brief called by QmitkFunctionality when DataManager's selection has changed
	virtual void OnSelectionChanged(berry::IWorkbenchPart::Pointer source,
		const QList<mitk::DataNode::Pointer>& nodes) override;

	//! [render-window-part-listener]
	void RenderWindowPartActivated(mitk::IRenderWindowPart* renderWindowPart) override;
	void RenderWindowPartDeactivated(mitk::IRenderWindowPart* renderWindowPart) override;
	//! [render-window-part-listener]

	Ui::QmitkRegionGrowingViewControls m_Controls;

private:
	// get current selected as mitk::image
	mitk::Image*	getSelectedImage();
	mitk::DataNode* getSelectedNode();
	QString			getCurrentDataPath();

private:
	void ShowProcessedDataNode(mitk::Image::Pointer itkImage, std::string strNodeName, bool bSetDefaultProperties = false);
	void ShowProcessedDataNode(ImageType::Pointer itkImage, std::string strNodeName, bool bSetDefaultProperties = false);

private:
	bool LoadIndexValues(QString strFile, VIndexValue& vIndexValues);
	bool LoadIndexes(QString strFile, ImageType::SizeType& image_size, VIndexes& vIndexes);
	void SaveIndexes(QString strFile, ImageType::SizeType& image_size, VIndexes& vIndexes);

private:
	/// \brief This is the actual seed point data object
	mitk::PointSet::Pointer m_PointSet;
	QmitkPointListWidget* m_PointListWidget;
	ImageType::RegionType mCurrentRegion;
=======
  // this is needed for all Qt objects that should have a Qt meta-object
  // (everything that derives from QObject and wants to have signal/slots)
  Q_OBJECT

  public:

    static const std::string VIEW_ID;

    QmitkRegionGrowingView();

  protected slots:

    /// \brief Called when the user clicks the GUI button
    void DoImageProcessing();

  protected:

    virtual void CreateQtPartControl(QWidget *parent) override;

    virtual void SetFocus() override;

    virtual void OnSelectionChanged( berry::IWorkbenchPart::Pointer source,
                                     const QList<mitk::DataNode::Pointer>& nodes ) override;

    //! [render-window-part-listener]
    void RenderWindowPartActivated(mitk::IRenderWindowPart* renderWindowPart) override;
    void RenderWindowPartDeactivated(mitk::IRenderWindowPart* renderWindowPart) override;
    //! [render-window-part-listener]

    Ui::QmitkRegionGrowingViewControls m_Controls;

  private:

    //! [itkimageprocessing]
    /**
      \brief ITK image processing function
      This function is templated like an ITK image. The MITK-Macro AccessByItk determines the actual pixel type and dimensionality of
      a given MITK image and calls this function for further processing (in our case region growing)
    */
    template < typename TPixel, unsigned int VImageDimension >
    void ItkImageProcessing( itk::Image< TPixel, VImageDimension >* itkImage, mitk::BaseGeometry* imageGeometry );
    //! [itkimageprocessing]

    //! [members]
    /// \brief This is the actual seed point data object
    mitk::PointSet::Pointer m_PointSet;

    QmitkPointListWidget* m_PointListWidget;
    //! [members]
>>>>>>> .merge_file_a09564

};

#endif // QmitkRegionGrowingView_h
